import jsPDF from "jspdf"
import "jspdf-autotable"
import { formatCurrency } from "@/lib/loan-calculations"
import type { DownPaymentScheduleItem, MonthlyScheduleItem, YearlyScheduleItem } from "@/types/loan-calculator"

interface LoanDetails {
  propertyPrice: number
  downPayment: number
  loanAmount: number
  interestRate: number
  monthlyPayment: number
  firstYearMonthlyPayment: number
  totalPayment: number
  term: number
}

export function exportToPDF(
  loanSchedule: MonthlyScheduleItem[] | YearlyScheduleItem[],
  scheduleView: "monthly" | "yearly",
  loanDetails: LoanDetails,
  downPaymentSchedule: DownPaymentScheduleItem[],
  propertyName?: string | null,
) {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.width
  const margin = 20
  let yPos = 30

  // Header
  doc.setFontSize(20)
  doc.setFont("helvetica", "bold")
  doc.text("Loan Calculator Report", pageWidth / 2, yPos, { align: "center" })
  yPos += 10

  doc.setFontSize(12)
  doc.setFont("helvetica", "normal")
  doc.text(`Property: ${propertyName || "Custom Property"}`, margin, yPos)
  yPos += 8
  doc.text(`Date: ${new Date().toLocaleDateString()}`, margin, yPos)
  yPos += 15

  // Loan Summary Table
  const loanSummaryData = [
    ["Property Price", formatCurrency(loanDetails.propertyPrice)],
    ["Down Payment", formatCurrency(loanDetails.downPayment)],
    ["Loan Amount", formatCurrency(loanDetails.loanAmount)],
    ["Interest Rate", `${loanDetails.interestRate}% per annum`],
    ["Loan Term", `${loanDetails.term} years`],
    ["Monthly Loan Payment (1st Year)", formatCurrency(loanDetails.firstYearMonthlyPayment)],
    ["Monthly Loan Payment (Subsequent Years)", formatCurrency(loanDetails.monthlyPayment)],
    ["Total Interest", formatCurrency(loanDetails.totalPayment - loanDetails.loanAmount)],
    ["Total Amount Payable", formatCurrency(loanDetails.totalPayment)],
  ]

  doc.autoTable({
    startY: yPos,
    head: [["Loan Summary", "Amount"]],
    body: loanSummaryData,
    theme: "grid",
    headStyles: { fillColor: [65, 147, 45] },
    margin: { left: margin, right: margin },
  })
  yPos = (doc as any).lastAutoTable.finalY + 15

  // Down Payment Schedule Table
  if (downPaymentSchedule.length > 0) {
    doc.setFontSize(16)
    doc.text("Down Payment Schedule (24 Months)", margin, yPos)
    yPos += 10

    const dpTableData = downPaymentSchedule.map((item) => [
      item.month.toString(),
      formatCurrency(item.payment),
      formatCurrency(item.balance),
      formatCurrency(item.cumulativePaid),
      `${item.interestRate}%`,
    ])

    doc.autoTable({
      startY: yPos,
      head: [["Month", "Payment", "Balance", "Cumulative Paid", "Interest Rate"]],
      body: dpTableData,
      theme: "grid",
      headStyles: { fillColor: [4, 0, 157] },
      margin: { left: margin, right: margin },
    })
    yPos = (doc as any).lastAutoTable.finalY + 15
  }

  // Loan Amortization Schedule Table
  doc.setFontSize(16)
  doc.text(`Loan Amortization Schedule (${scheduleView === "monthly" ? "Monthly" : "Yearly"})`, margin, yPos)
  yPos += 10

  const loanTableData = loanSchedule.map((item: any) => [
    scheduleView === "monthly" ? item.month.toString() : item.year.toString(),
    formatCurrency(item.principal),
    formatCurrency(item.interest),
    formatCurrency(item.payment),
    formatCurrency(item.balance),
  ])

  doc.autoTable({
    startY: yPos,
    head: [[scheduleView === "monthly" ? "Month" : "Year", "Principal", "Interest", "Payment", "Balance"]],
    body: loanTableData,
    theme: "grid",
    headStyles: { fillColor: [65, 147, 45] },
    margin: { left: margin, right: margin },
  })

  // Footer
  doc.setFontSize(10)
  doc.text(`Generated by Aman Group Loan Calculator`, pageWidth / 2, doc.internal.pageSize.height - 20, {
    align: "center",
  })

  doc.save(`loan-calculation-${propertyName || "report"}-${new Date().toLocaleDateString()}.pdf`)
}
